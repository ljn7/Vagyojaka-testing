name: MacOS Build

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: macos-13
    
    env:
      QT_VERSION: "6.6.1"
      MACOSX_DEPLOYMENT_TARGET: "12.0"
      SDKROOT: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.3.sdk
      HOMEBREW_NO_AUTO_UPDATE: 1
      HOMEBREW_NO_INSTALL_CLEANUP: 1
      
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ runner.os }}-ccache-${{ github.sha }}
        restore-keys: ${{ runner.os }}-ccache-

    - name: Setup build environment
      run: |
        # Set SDK and deployment target
        sudo xcode-select --switch /Applications/Xcode.app
        
        # Set global compilation flags for macOS 12
        echo "CFLAGS=-mmacosx-version-min=12.0" >> $GITHUB_ENV
        echo "CXXFLAGS=-mmacosx-version-min=12.0" >> $GITHUB_ENV
        echo "LDFLAGS=-mmacosx-version-min=12.0" >> $GITHUB_ENV
        
        # Configure Homebrew for source builds
        echo "HOMEBREW_BUILD_FROM_SOURCE=1" >> $GITHUB_ENV
        echo "HOMEBREW_NO_BINARY=1" >> $GITHUB_ENV
        
        # Create bottle configuration for macOS 12
        mkdir -p ~/Library/Homebrew/
        cat > ~/Library/Homebrew/bottle.json << EOF
        {
          "macOS": {
            "monterey": {
              "MACOS_VERSION": "12",
              "MACOS_SDK": "12.3"
            }
          }
        }
        EOF

    - name: Download and build dependencies
      run: |
        # Initialize source list
        PACKAGES=(
          "nasm"
          "libgit2"
          "fftw"
          "webp"
          "jpeg-xl"
          "sdl2"
          "libsoxr"
          "aom"
          "dav1d"
          "libvmaf"
          "opencore-amr"
          "opus"
          "rav1e"
          "libsrt"
          "tesseract"
          "theora"
          "x264"
          "x265"
          "libvpx"
          "snappy"
          "zimg"
          "rubberband"
          "speex"
          "librist"
        )
        
        # Download sources
        for pkg in "${PACKAGES[@]}"; do
          echo "Downloading source for $pkg..."
          brew fetch --force --build-from-source $pkg
        done
        
        # Extract and build each package
        for pkg in "${PACKAGES[@]}"; do
          echo "Building $pkg..."
          export HOMEBREW_OPTFLAGS="-mmacosx-version-min=12.0"
          export HOMEBREW_OPTIMIZATION_LEVEL="2"
          
          # Download source and extract formula
          brew extract --version=latest $pkg homebrew/core
          
          # Build with macOS 12 targeting
          HOMEBREW_DEVELOPER=1 brew install --build-from-source \
            --env=std \
            --cc=clang \
            --build-bottle \
            --bottle-arch=core2 \
            $pkg || {
              echo "Failed to build $pkg"
              exit 1
            }
        done

    - name: Build FFmpeg
      run: |
        # Download FFmpeg source using brew
        brew fetch --force --build-from-source ffmpeg
        
        # Build with custom options
        HOMEBREW_DEVELOPER=1 brew install --build-from-source \
          --env=std \
          --cc=clang \
          --build-bottle \
          --bottle-arch=core2 \
          --with-macos-sdk=12.3 \
          --with-sdl2 \
          --with-freetype \
          --with-fftw \
          --with-webp \
          --with-jpeg-xl \
          --disable-avfoundation \
          ffmpeg

    - name: Install Qt
      uses: jurplel/install-qt-action@v4.1.1
      with:
        version: ${{ env.QT_VERSION }}
        modules: 'qtmultimedia qtpositioning qtwebchannel qtshadertools'
        tools: 'tools_cmake tools_ninja'
        cache: true
        aqtversion: '==3.1.*'

    - name: Verify dependencies
      run: |
        echo "Checking library deployment targets..."
        find /usr/local/lib -name "*.dylib" -exec sh -c 'echo "{}"; otool -l "{}" | grep -A2 "LC_VERSION_MIN_MACOSX"' \;

    - name: Build project
      run: |
        mkdir build && cd build
        
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_PREFIX_PATH=${{ env.Qt6_DIR }} \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=12.0 \
          -DCMAKE_OSX_SYSROOT=$SDKROOT \
          -DCMAKE_INSTALL_RPATH="@executable_path/../Frameworks" \
          -DCMAKE_C_COMPILER_LAUNCHER=ccache \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
          -DCMAKE_C_FLAGS="-mmacosx-version-min=12.0" \
          -DCMAKE_CXX_FLAGS="-mmacosx-version-min=12.0" \
          -DCMAKE_SHARED_LINKER_FLAGS="-mmacosx-version-min=12.0"
        
        cmake --build . --config Release -j$(sysctl -n hw.ncpu)

    - name: Package
      working-directory: ./build/output
      run: |
        # Initial deployment
        macdeployqt Vagyojaka.app -verbose=2
        
        # Create and run fix_libs script for library deployment
        cat > fix_libs.py << 'EOL'
        from pathlib import Path
        import sys
        import subprocess
        import shutil
        from collections import deque

        def fix_libraries(bundle_path):
            framework_path = Path(bundle_path) / 'Contents' / 'Frameworks'
            framework_path.mkdir(parents=True, exist_ok=True)
            
            # Track processed libraries
            framework_libs = set()
            libs_to_fix = deque()
            
            # Initial library scan
            for lib in Path(bundle_path).glob('**/*.dylib'):
                libs_to_fix.append(lib)
            for lib in Path(bundle_path).glob('**/*.so'):
                libs_to_fix.append(lib)
            
            # Define special dependencies
            special_deps = {
                'webp': ['libsharpyuv.0.dylib'],
                'jpeg-xl': ['libjxl_cms.0.11.dylib', 'libjxl_threads.0.11.dylib'],
                'ffmpeg': [
                    'libavcodec.61.dylib',
                    'libavdevice.61.dylib',
                    'libavfilter.10.dylib',
                    'libavformat.61.dylib',
                    'libavutil.59.dylib',
                    'libpostproc.58.dylib',
                    'libswresample.5.dylib',
                    'libswscale.8.dylib'
                ]
            }
            
            # Copy special dependencies
            for pkg, deps in special_deps.items():
                for dep in deps:
                    source = Path('/usr/local/opt') / pkg / 'lib' / dep
                    if source.exists():
                        dest = framework_path / dep
                        print(f"Copying special dependency: {source} -> {dest}")
                        shutil.copy2(str(source), str(dest))
                        framework_libs.add(dep)
                        libs_to_fix.append(dest)

            while libs_to_fix:
                lib = libs_to_fix.popleft()
                print(f"Processing: {lib}")
                
                # Fix library ID
                subprocess.run(['install_name_tool', '-id', f'@rpath/{lib.name}', str(lib)], check=True)
                
                try:
                    result = subprocess.check_output(['otool', '-L', str(lib)], stderr=subprocess.STDOUT).decode('utf-8')
                except subprocess.CalledProcessError as e:
                    print(f"Error checking dependencies for {lib}: {e}")
                    continue
                
                for line in result.splitlines()[1:]:
                    dep = line.strip().split()[0]
                    
                    if dep.startswith('/usr/local'):
                        dep_path = Path(dep)
                        if dep_path.name not in framework_libs:
                            if dep_path.exists():
                                print(f"Copying {dep_path} to {framework_path}")
                                shutil.copy2(str(dep_path), str(framework_path))
                                framework_libs.add(dep_path.name)
                                libs_to_fix.append(framework_path / dep_path.name)
                        
                        # Fix dependency path
                        new_path = f'@rpath/{dep_path.name}'
                        subprocess.run(['install_name_tool', '-change', dep, new_path, str(lib)], check=True)

        if __name__ == '__main__':
            if len(sys.argv) != 2:
                print("Usage: python3 fix_libs.py <app-bundle-path>")
                sys.exit(1)
            fix_libraries(sys.argv[1])
        EOL
        
        # Run fix_libs script
        python3 fix_libs.py "Vagyojaka.app"
        
        # Verify libraries and create DMG
        echo "Checking all libraries in bundle..."
        find Vagyojaka.app -name "*.dylib" -exec otool -L {} \;
        
        macdeployqt Vagyojaka.app -verbose=2 -dmg -always-overwrite

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: Vagyojaka-macOS
        path: build/output/Vagyojaka*.dmg

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: build/output/Vagyojaka*.dmg
        draft: false
        prerelease: false
        generate_release_notes: true
