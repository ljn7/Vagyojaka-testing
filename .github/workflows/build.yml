name: MacOS Build

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: macos-13
    
    env:
      QT_VERSION: "6.6.1"
      MACOSX_DEPLOYMENT_TARGET: "12.0"
      BUILD_DIR: ${{ github.workspace }}/deps_build
      INSTALL_PREFIX: ${{ github.workspace }}/deps_install
      SDKROOT: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.3.sdk
      PKG_CONFIG_PATH: ${{ github.workspace }}/deps_install/lib/pkgconfig
      
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup build environment
      run: |
        # Create build directories
        mkdir -p $BUILD_DIR $INSTALL_PREFIX
        
        # Set compilation flags for macOS 12
        echo "CFLAGS=-mmacosx-version-min=12.0 -I$INSTALL_PREFIX/include" >> $GITHUB_ENV
        echo "CXXFLAGS=-mmacosx-version-min=12.0 -I$INSTALL_PREFIX/include" >> $GITHUB_ENV
        echo "LDFLAGS=-mmacosx-version-min=12.0 -L$INSTALL_PREFIX/lib" >> $GITHUB_ENV
        
        # Add installation path to PATH
        echo "$INSTALL_PREFIX/bin" >> $GITHUB_PATH

    - name: Build zlib
      working-directory: ${{ env.BUILD_DIR }}
      run: |
        curl -L https://zlib.net/zlib-1.3.tar.gz | tar xz
        cd zlib-1.3
        ./configure --prefix=$INSTALL_PREFIX
        make -j$(sysctl -n hw.ncpu)
        make install

    - name: Build yasm
      working-directory: ${{ env.BUILD_DIR }}
      run: |
        curl -L https://www.tortall.net/projects/yasm/releases/yasm-1.3.0.tar.gz | tar xz
        cd yasm-1.3.0
        ./configure --prefix=$INSTALL_PREFIX
        make -j$(sysctl -n hw.ncpu)
        make install

    - name: Build nasm
      working-directory: ${{ env.BUILD_DIR }}
      run: |
        curl -L https://www.nasm.us/pub/nasm/releasebuilds/2.16.01/nasm-2.16.01.tar.gz | tar xz
        cd nasm-2.16.01
        ./configure --prefix=$INSTALL_PREFIX
        make -j$(sysctl -n hw.ncpu)
        make install

    - name: Build libpng
      working-directory: ${{ env.BUILD_DIR }}
      run: |
        curl -L https://download.sourceforge.net/libpng/libpng-1.6.40.tar.gz | tar xz
        cd libpng-1.6.40
        ./configure --prefix=$INSTALL_PREFIX
        make -j$(sysctl -n hw.ncpu)
        make install

    - name: Build libjpeg-turbo
      working-directory: ${{ env.BUILD_DIR }}
      run: |
        curl -L https://github.com/libjpeg-turbo/libjpeg-turbo/archive/refs/tags/3.0.0.tar.gz | tar xz
        cd libjpeg-turbo-3.0.0
        cmake -B build \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=$INSTALL_PREFIX \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=12.0
        cmake --build build -j$(sysctl -n hw.ncpu)
        cmake --install build

    - name: Build SDL2
      working-directory: ${{ env.BUILD_DIR }}
      run: |
        curl -L https://github.com/libsdl-org/SDL/releases/download/release-2.28.5/SDL2-2.28.5.tar.gz | tar xz
        cd SDL2-2.28.5
        ./configure --prefix=$INSTALL_PREFIX
        make -j$(sysctl -n hw.ncpu)
        make install

    - name: Build x264
      working-directory: ${{ env.BUILD_DIR }}
      run: |
        git clone --depth 1 https://code.videolan.org/videolan/x264.git
        cd x264
        ./configure --prefix=$INSTALL_PREFIX --enable-shared --disable-asm
        make -j$(sysctl -n hw.ncpu)
        make install

    - name: Build x265
      working-directory: ${{ env.BUILD_DIR }}
      run: |
        curl -L https://github.com/videolan/x265/archive/refs/tags/3.5.tar.gz | tar xz
        cd x265-3.5/build/linux
        cmake -G "Unix Makefiles" ../../source \
          -DCMAKE_INSTALL_PREFIX=$INSTALL_PREFIX \
          -DENABLE_SHARED=ON \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=12.0
        make -j$(sysctl -n hw.ncpu)
        make install

    - name: Build FFmpeg
      working-directory: ${{ env.BUILD_DIR }}
      run: |
        git clone --depth 1 --branch n6.1.1 https://github.com/FFmpeg/FFmpeg.git
        cd FFmpeg
        ./configure \
          --prefix=$INSTALL_PREFIX \
          --enable-shared \
          --disable-static \
          --enable-pthreads \
          --enable-version3 \
          --enable-libx264 \
          --enable-libx265 \
          --enable-libsdl2 \
          --enable-videotoolbox \
          --disable-avfoundation \
          --disable-doc \
          --disable-programs \
          --disable-everything \
          --enable-decoder=h264,hevc,aac,mp3 \
          --enable-demuxer=mov,mp4,m4a,wav \
          --enable-protocol=file \
          --enable-filter=aresample \
          --disable-xlib \
          --disable-zlib \
          --disable-securetransport
        make -j$(sysctl -n hw.ncpu)
        make install

    - name: Install Qt
      uses: jurplel/install-qt-action@v4.1.1
      with:
        version: ${{ env.QT_VERSION }}
        modules: 'qtmultimedia qtpositioning qtwebchannel qtshadertools'
        tools: 'tools_cmake tools_ninja'
        cache: true
        aqtversion: '==3.1.*'

    - name: Build project
      run: |
        mkdir build && cd build
        
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_PREFIX_PATH="${{ env.Qt6_DIR }};$INSTALL_PREFIX" \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=12.0 \
          -DCMAKE_OSX_SYSROOT=$SDKROOT \
          -DCMAKE_INSTALL_RPATH="@executable_path/../Frameworks" \
          -DCMAKE_C_FLAGS="-mmacosx-version-min=12.0" \
          -DCMAKE_CXX_FLAGS="-mmacosx-version-min=12.0" \
          -DCMAKE_SHARED_LINKER_FLAGS="-mmacosx-version-min=12.0" \
          -DCMAKE_INSTALL_PREFIX=$INSTALL_PREFIX
        
        cmake --build . --config Release -j$(sysctl -n hw.ncpu)

    - name: Package
      working-directory: ./build/output
      run: |
        # Initial deployment
        macdeployqt Vagyojaka.app -verbose=2
        
        # Copy our built libraries
        mkdir -p Vagyojaka.app/Contents/Frameworks
        for lib in $INSTALL_PREFIX/lib/*.dylib; do
          if [ -f "$lib" ]; then
            cp -L "$lib" Vagyojaka.app/Contents/Frameworks/
          fi
        done
        
        # Fix library paths
        find Vagyojaka.app/Contents/Frameworks -name "*.dylib" | while read lib; do
          echo "Processing $lib"
          # Fix ID
          install_name_tool -id "@rpath/$(basename $lib)" "$lib"
          
          # Fix dependencies
          otool -L "$lib" | grep $INSTALL_PREFIX | cut -d' ' -f1 | while read dep; do
            if [ "$dep" != "$lib" ]; then
              install_name_tool -change "$dep" "@rpath/$(basename $dep)" "$lib"
            fi
          done
        done
        
        # Create DMG
        macdeployqt Vagyojaka.app -verbose=2 -dmg -always-overwrite

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: Vagyojaka-macOS
        path: build/output/Vagyojaka*.dmg

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: build/output/Vagyojaka*.dmg
        draft: false
        prerelease: false
        generate_release_notes: true
