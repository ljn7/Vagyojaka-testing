name: MacOS Build

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: macos-15
    
    env:
      QT_VERSION: "6.6.1"
      HOMEBREW_NO_AUTO_UPDATE: 1
      HOMEBREW_NO_INSTALL_CLEANUP: 1
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ runner.os }}-ccache-${{ github.sha }}
        restore-keys: ${{ runner.os }}-ccache-

    - name: Install Qt
      uses: jurplel/install-qt-action@v4.1.1
      with:
        version: ${{ env.QT_VERSION }}
        modules: 'qtmultimedia qtpositioning qtwebchannel qtshadertools'
        tools: 'tools_cmake tools_ninja'
        cache: true
        aqtversion: '==3.1.*'

    - name: Prepare environment
      run: |
        brew cleanup
        brew update-reset
        brew pin ffmpeg
        brew pin qt
        
    - name: Install dependencies
      run: |
        brew update
        PACKAGES=(
          "cmake"
          "pkg-config"
          "libgit2"
          "fftw"
          "ffmpeg"
          "webp"
          "jpeg-xl"
          "sdl2"
          "libsoxr"
        )
        
        for package in "${PACKAGES[@]}"; do
          echo "Installing $package..."
          brew install $package || {
            echo "Failed to install $package, retrying with verbose output"
            brew install -v $package
            if [ $? -ne 0 ]; then
              echo "Installation failed for $package"
              brew doctor
              exit 1
            fi
          }
        done
        
    - name: Check Libraries
      run: |
        echo "Checking library files..."
        check_lib_files() {
          local pkg=$1
          local lib_path
          
          if [ -d "/opt/homebrew" ]; then
            BREW_PREFIX="/opt/homebrew"
          else
            BREW_PREFIX="/usr/local"
          fi
          
          lib_path="$BREW_PREFIX/opt/$pkg/lib"
          
          echo "Checking $pkg"
          echo "Looking in path: $lib_path"
          lib_files=$(find $lib_path -name "*.dylib" -type f 2>/dev/null)
          if [ -z "$lib_files" ]; then
            echo "❌ No library files found for $pkg!"
            echo "Brew install location: $(brew --prefix)"
            echo "Trying to locate package..."
            brew list $pkg --verbose || echo "Failed to list package"
            return 1
          else
            echo "✅ Library files found for $pkg:"
            echo "$lib_files"
          fi
        }
        
        # Check each package
        for pkg in ffmpeg libgit2 fftw webp sdl2 libsoxr; do
          check_lib_files "$pkg" || exit 1
        done
        
    - name: Create build directory
      run: mkdir -p build
    
    - name: Configure CMake
      working-directory: ./build
      env:
        Qt6_DIR: ${{ env.Qt6_DIR }}
        CMAKE_BUILD_PARALLEL_LEVEL: $(sysctl -n hw.ncpu)
      run: |
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_PREFIX_PATH=${{ env.Qt6_DIR }} \
          -DCMAKE_INSTALL_RPATH="@executable_path/../Frameworks" \
          -DCMAKE_C_COMPILER_LAUNCHER=ccache \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
          -DCMAKE_INSTALL_PREFIX=/usr/local
    
    - name: Build
      working-directory: ./build
      run: |
        cmake --build . --config Release -j$(sysctl -n hw.ncpu)
        
    - name: Package
      working-directory: ./build
      run: |
        cd output
         
        # First run macdeployqt
        echo "Running initial macdeployqt..."
        macdeployqt Vagyojaka.app -verbose=2
        
        # Create Python script to fix library paths
        cat > fix_libs.py << 'EOL'
        from pathlib import Path
        import sys
        import subprocess
        import shutil
        from collections import deque
        
        def fix_libraries(bundle_path):
            framework_path = Path(bundle_path) / 'Contents' / 'Frameworks'
            framework_path.mkdir(parents=True, exist_ok=True)
            
            # Track processed libraries
            framework_libs = set()
            libs_to_fix = deque()
            
            # Initial library scan
            for lib in Path(bundle_path).glob('**/*.dylib'):
                libs_to_fix.append(lib)
            for lib in Path(bundle_path).glob('**/*.so'):
                libs_to_fix.append(lib)
            
            # Special handling for dependencies
            special_deps = {
                'webp': ['libsharpyuv.0.dylib'],
                'jpeg-xl': ['libjxl_cms.0.11.dylib', 'libjxl_threads.0.11.dylib']
            }
            
            for pkg, deps in special_deps.items():
                for dep in deps:
                    for prefix in ['/opt/homebrew', '/usr/local']:
                        source = Path(prefix) / f'opt/{pkg}/lib' / dep
                        if source.exists():
                            dest = framework_path / dep
                            print(f"Copying special dependency: {source} -> {dest}")
                            shutil.copy2(str(source), str(dest))
                            framework_libs.add(dep)
                            libs_to_fix.append(dest)
                            break
        
            while libs_to_fix:
                lib = libs_to_fix.popleft()
                print(f"Processing: {lib}")
                
                # Fix the library ID
                subprocess.run(['install_name_tool', '-id', f'@rpath/{lib.name}', str(lib)])
                
                # Get library dependencies
                result = subprocess.check_output(['otool', '-L', str(lib)], stderr=subprocess.STDOUT).decode('utf-8')
                
                for line in result.splitlines()[1:]:  # Skip first line (library ID)
                    dep = line.strip().split()[0]
                    
                    # Handle different path cases
                    if any(dep.startswith(prefix) for prefix in ['/usr/local', '/opt/homebrew']):
                        dep_path = Path(dep.split(' (compatibility')[0])
                        if dep_path.name not in framework_libs:
                            # Copy library if it exists
                            brew_paths = [
                                Path('/opt/homebrew'),
                                Path('/usr/local')
                            ]
                            
                            for brew_path in brew_paths:
                                possible_paths = [
                                    brew_path / 'lib' / dep_path.name,
                                    brew_path / 'opt/webp/lib' / dep_path.name,
                                    brew_path / 'opt/jpeg-xl/lib' / dep_path.name,
                                    brew_path / 'opt/ffmpeg/lib' / dep_path.name
                                ]
                                
                                for path in possible_paths:
                                    if path.exists():
                                        print(f"Copying {path} to {framework_path}")
                                        shutil.copy2(str(path), str(framework_path))
                                        framework_libs.add(dep_path.name)
                                        libs_to_fix.append(framework_path / dep_path.name)
                                        break
                        
                        # Fix the dependency path
                        new_path = f'@rpath/{dep_path.name}'
                        subprocess.run(['install_name_tool', '-change', dep, new_path, str(lib)])
                    
                    # Handle @loader_path cases
                    elif '@loader_path' in dep:
                        dep_path = Path(dep.split(' (compatibility')[0])
                        rel_path = str(dep_path).replace('@loader_path/../../../../', '')
                        actual_path = Path('/opt/homebrew') / rel_path
                        
                        if actual_path.exists() and dep_path.name not in framework_libs:
                            print(f"Copying {actual_path} to {framework_path}")
                            shutil.copy2(str(actual_path), str(framework_path))
                            framework_libs.add(dep_path.name)
                            libs_to_fix.append(framework_path / dep_path.name)
                        
                        new_path = f'@rpath/{dep_path.name}'
                        subprocess.run(['install_name_tool', '-change', dep, new_path, str(lib)])
        
        if __name__ == '__main__':
            if len(sys.argv) != 2:
                print("Usage: python3 fix_libs.py <app-bundle-path>")
                sys.exit(1)
            fix_libraries(sys.argv[1])
        EOL
        
        # Run our fix script
        echo "Running library fix script..."
        python3 fix_libs.py "Vagyojaka.app"
        
        # Create DMG
        echo "Creating DMG..."
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          DMG_NAME="Vagyojaka-${{ github.ref_name }}-macos.dmg"
        else
          DMG_NAME="Vagyojaka.dmg"
        fi
        
        macdeployqt Vagyojaka.app -verbose=2 -dmg -always-overwrite

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: Vagyojaka-macOS
        path: build/output/Vagyojaka*.dmg

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: build/output/Vagyojaka*.dmg
        draft: false
        prerelease: false
        generate_release_notes: true
