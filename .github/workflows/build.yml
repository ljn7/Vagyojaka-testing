name: MacOS Build

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: macos-13
    
    env:
      QT_VERSION: "6.6.1"
      MACOSX_DEPLOYMENT_TARGET: "12.0"
    
    steps:
    - uses: actions/checkout@v4

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        modules: 'qtmultimedia qtpositioning qtwebchannel'
        tools: 'tools_cmake tools_ninja'
        cache: true
        aqtversion: '==3.1.*'

    - name: Install dependencies
      run: |
        brew update
        brew install cmake pkg-config
        brew install libgit2
        brew install fftw
        brew install ffmpeg
        brew install webp
        brew install jpeg-xl
        brew install sdl2
        brew install libsoxr

    - name: Create build directory
      run: mkdir build
    
    - name: Configure CMake
      working-directory: ./build
      env:
        Qt6_DIR: ${{ env.Qt6_DIR }}
      run: |
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_PREFIX_PATH=${{ env.Qt6_DIR }} \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=12.0 \
          -DCMAKE_INSTALL_RPATH="@executable_path/../Frameworks"
    
    - name: Build
      working-directory: ./build
      run: |
        cmake --build . --config Release -j$(sysctl -n hw.ncpu)
    
    - name: Package
      working-directory: ./build
      run: |
        cd output
        
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        
        # Setup app structure
        if [ ! -d "Vagyojaka.app" ]; then
          echo "Error: Vagyojaka.app not found"
          exit 1
        fi
        
        echo "Creating Frameworks directory..."
        mkdir -p "Vagyojaka.app/Contents/Frameworks"
        
        echo "Setting initial permissions..."
        chmod -R 755 "Vagyojaka.app"
        
        # Function to copy libraries with debug info
        copy_lib_with_deps() {
          local lib=$1
          
          if [ ! -f "$lib" ]; then
            echo "Warning: Library $lib not found"
            return 0
          fi
          
          local basename=$(basename "$lib")
          local dest="Vagyojaka.app/Contents/Frameworks/$basename"
          
          echo "Processing library: $lib"
          echo "Destination: $dest"
          
          if [ ! -f "$dest" ]; then
            echo "Copying $lib to Frameworks directory..."
            cp -v -f -p "$lib" "Vagyojaka.app/Contents/Frameworks/" || {
              echo "Error: Failed to copy $lib"
              echo "Source exists: $([ -f "$lib" ] && echo "Yes" || echo "No")"
              echo "Destination dir exists: $([ -d "Vagyojaka.app/Contents/Frameworks" ] && echo "Yes" || echo "No")"
              ls -la "$(dirname "$lib")"
              return 1
            }
            
            if [ ! -f "$dest" ]; then
              echo "Error: File not found after copy: $dest"
              return 1
            fi
            
            echo "Setting permissions for $dest"
            chmod 755 "$dest" || {
              echo "Error: Failed to set permissions on $dest"
              return 1
            }
            
            echo "Updating library ID for $dest"
            install_name_tool -id "@rpath/$basename" "$dest"
            
            echo "Processing dependencies for $dest"
            otool -L "$dest" | tail -n +2 | awk '{print $1}' | grep -E '^(/usr/local/|/opt/homebrew/)' | while read dep; do
              local depbase=$(basename "$dep")
              echo "Updating dependency path: $dep -> @rpath/$depbase"
              install_name_tool -change "$dep" "@rpath/$depbase" "$dest"
              
              for prefix in /usr/local/lib /opt/homebrew/lib /usr/local/opt/*/lib /opt/homebrew/opt/*/lib; do
                if [ -f "$prefix/$depbase" ]; then
                  echo "Found dependency: $prefix/$depbase"
                  copy_lib_with_deps "$prefix/$depbase"
                  break
                fi
              done
            done
          else
            echo "Library $basename already exists in Frameworks"
          fi
        }

        # First verify FFmpeg installation
        echo "FFmpeg prefix: $(brew --prefix ffmpeg)"
        echo "FFmpeg libraries:"
        ls -la "$(brew --prefix ffmpeg)/lib"
        
        # Copy FFmpeg libraries with extra verification
        echo "Copying FFmpeg libraries..."
        for lib in $(find "$(brew --prefix ffmpeg)/lib" -name "*.dylib" -type f); do
          echo "Found FFmpeg library: $lib"
          copy_lib_with_deps "$lib"
        done

        # Process other libraries
        for formula in webp jpeg-xl sdl2 libsoxr libgit2 fftw; do
          echo "Processing $formula libraries..."
          prefix=$(brew --prefix $formula)
          echo "$formula prefix: $prefix"
          for lib in $(find "$prefix/lib" -name "*.dylib" -type f); do
            copy_lib_with_deps "$lib"
          done
        done

        echo "Setting up executable..."
        chmod 755 "Vagyojaka.app/Contents/MacOS/Vagyojaka"
        
        echo "Fixing executable library references..."
        otool -L "Vagyojaka.app/Contents/MacOS/Vagyojaka" | tail -n +2 | awk '{print $1}' | grep -E '^(/usr/local/|/opt/homebrew/)' | while read dep; do
          install_name_tool -change "$dep" "@rpath/$(basename "$dep")" "Vagyojaka.app/Contents/MacOS/Vagyojaka"
        done

        echo "Running macdeployqt..."
        macdeployqt Vagyojaka.app -verbose=2 -always-overwrite
        macdeployqt Vagyojaka.app -verbose=2 -dmg -always-overwrite

        if [ -f Vagyojaka.dmg ]; then
          chmod 644 Vagyojaka.dmg
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            mv Vagyojaka.dmg "Vagyojaka-${{ github.ref_name }}-macos.dmg"
          fi
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: Vagyojaka-macOS
        path: build/output/Vagyojaka*.dmg

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: build/output/Vagyojaka*.dmg
        draft: false
        prerelease: false
        generate_release_notes: true
