name: MacOS Build

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: macos-13
    
    env:
      QT_VERSION: "6.6.1"
      MACOSX_DEPLOYMENT_TARGET: "12.0"
      HOMEBREW_NO_AUTO_UPDATE: 1  # Prevent auto-updates during build
      HOMEBREW_NO_INSTALL_CLEANUP: 1  # Prevent cleanup during build
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for versioning

    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ runner.os }}-ccache-${{ github.sha }}
        restore-keys: ${{ runner.os }}-ccache-

    - name: Install Qt
      uses: jurplel/install-qt-action@v4.1.1
      with:
        version: ${{ env.QT_VERSION }}
        modules: 'qtmultimedia qtpositioning qtwebchannel qtshadertools'
        tools: 'tools_cmake tools_ninja'
        cache: true
        aqtversion: '==3.1.*'

    - name: Prepare environment
      run: |
        brew cleanup
        brew update-reset
        # Pin versions to ensure reproducibility
        brew pin ffmpeg
        brew pin qt
        
    - name: Install dependencies
      run: |
        brew update
        PACKAGES=(
          "cmake"
          "pkg-config"
          "libgit2"
          "fftw"
          "ffmpeg"
          "webp"
          "jpeg-xl"
          "sdl2"
          "libsoxr"
        )
        
        for package in "${PACKAGES[@]}"; do
          echo "Installing $package..."
          brew install $package || {
            echo "Failed to install $package, retrying with verbose output"
            brew install -v $package
            if [ $? -ne 0 ]; then
              echo "Installation failed for $package"
              brew doctor
              exit 1
            fi
          }
        done
        
    - name: Check Libraries
      run: |
        echo "Checking library files..."
        check_lib_files() {
          local pkg=$1
          local lib_path
          
          if [ -d "/opt/homebrew" ]; then
            BREW_PREFIX="/opt/homebrew"
          else
            BREW_PREFIX="/usr/local"
          fi
          
          lib_path="$BREW_PREFIX/opt/$pkg/lib"
          
          echo "Checking $pkg"
          echo "Looking in path: $lib_path"
          lib_files=$(find $lib_path -name "*.dylib" -type f 2>/dev/null)
          if [ -z "$lib_files" ]; then
            echo "❌ No library files found for $pkg!"
            echo "Brew install location: $(brew --prefix)"
            echo "Trying to locate package..."
            brew list $pkg --verbose || echo "Failed to list package"
            return 1
          else
            echo "✅ Library files found for $pkg:"
            echo "$lib_files"
          fi
        }
        
        # Check each package
        for pkg in ffmpeg libgit2 fftw webp sdl2 libsoxr; do
          check_lib_files "$pkg" || exit 1
        done
        
    - name: Create build directory
      run: mkdir -p build
    
    - name: Configure CMake
      working-directory: ./build
      env:
        Qt6_DIR: ${{ env.Qt6_DIR }}
        CMAKE_BUILD_PARALLEL_LEVEL: $(sysctl -n hw.ncpu)
      run: |
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_PREFIX_PATH=${{ env.Qt6_DIR }} \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=12.0 \
          -DCMAKE_INSTALL_RPATH="@executable_path/../Frameworks" \
          -DCMAKE_C_COMPILER_LAUNCHER=ccache \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
          -DCMAKE_INSTALL_PREFIX=/usr/local
    
    - name: Build
      working-directory: ./build
      run: |
        cmake --build . --config Release -j$(sysctl -n hw.ncpu)
        
    - name: Package
      working-directory: ./build
      run: |
        cd output
        
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        
        # Setup app structure
        if [ ! -d "Vagyojaka.app" ]; then
          echo "Error: Vagyojaka.app not found"
          exit 1
        fi
        
        echo "Creating Frameworks directory..."
        mkdir -p "Vagyojaka.app/Contents/Frameworks"
        
        echo "Setting initial permissions..."
        chmod -R 755 "Vagyojaka.app"
        
        # Function to copy libraries with debug info and signature verification
        copy_lib_with_deps() {
          local lib=$1
          local processed_libs=()
          
          if [ ! -f "$lib" ]; then
            echo "Warning: Library $lib not found"
            return 0
          fi
          
          local basename=$(basename "$lib")
          local dest="Vagyojaka.app/Contents/Frameworks/$basename"
          
          # Check if we've already processed this library
          if [[ " ${processed_libs[@]} " =~ " ${basename} " ]]; then
            echo "Library $basename already processed, skipping..."
            return 0
          fi
          
          processed_libs+=("$basename")
          
          echo "Processing library: $lib"
          echo "Destination: $dest"
          
          if [ ! -f "$dest" ]; then
            echo "Copying $lib to Frameworks directory..."
            
            # Verify library integrity
            if ! otool -L "$lib" >/dev/null 2>&1; then
              echo "Error: Library $lib failed integrity check"
              return 1
            fi
            
            cp -v -f -p "$lib" "Vagyojaka.app/Contents/Frameworks/" || {
              echo "Error: Failed to copy $lib"
              echo "Source exists: $([ -f "$lib" ] && echo "Yes" || echo "No")"
              echo "Destination dir exists: $([ -d "Vagyojaka.app/Contents/Frameworks" ] && echo "Yes" || echo "No")"
              return 1
            }
            
            if [ ! -f "$dest" ]; then
              echo "Error: File not found after copy: $dest"
              return 1
            fi
            
            echo "Setting permissions for $dest"
            chmod 755 "$dest" || {
              echo "Error: Failed to set permissions on $dest"
              return 1
            }
            
            echo "Updating library ID for $dest"
            install_name_tool -id "@rpath/$basename" "$dest"
            
            # Verify the library is not corrupted after modification
            if ! otool -L "$dest" >/dev/null 2>&1; then
              echo "Error: Library $dest corrupted after modification"
              return 1
            fi
            
            echo "Processing dependencies for $dest"
            otool -L "$dest" | tail -n +2 | awk '{print $1}' | grep -E '^(/usr/local/|/opt/homebrew/)' | while read dep; do
              local depbase=$(basename "$dep")
              echo "Updating dependency path: $dep -> @rpath/$depbase"
              install_name_tool -change "$dep" "@rpath/$depbase" "$dest"
              
              # Handle nested dependencies
              for prefix in /usr/local/lib /opt/homebrew/lib /usr/local/opt/*/lib /opt/homebrew/opt/*/lib; do
                if [ -f "$prefix/$depbase" ]; then
                  echo "Found dependency: $prefix/$depbase"
                  copy_lib_with_deps "$prefix/$depbase"
                  break
                fi
              done
            done
          else
            echo "Library $basename already exists in Frameworks"
          fi
        }

        # Verify and copy FFmpeg libraries
        echo "FFmpeg prefix: $(brew --prefix ffmpeg)"
        echo "FFmpeg libraries:"
        ls -la "$(brew --prefix ffmpeg)/lib"
        
        # Copy FFmpeg libraries with verification
        echo "Copying FFmpeg libraries..."
        find "$(brew --prefix ffmpeg)/lib" -name "*.dylib" -type f | while read lib; do
          echo "Found FFmpeg library: $lib"
          copy_lib_with_deps "$lib"
        done

        # Process other libraries with version checking
        for formula in webp jpeg-xl sdl2 libsoxr libgit2 fftw; do
          echo "Processing $formula libraries..."
          prefix=$(brew --prefix $formula)
          echo "$formula prefix: $prefix"
          if [ ! -d "$prefix/lib" ]; then
            echo "Error: Library directory for $formula not found!"
            exit 1
          fi
          find "$prefix/lib" -name "*.dylib" -type f | while read lib; do
            copy_lib_with_deps "$lib"
          done
        done

        # echo "Setting up executable..."
        chmod 755 "Vagyojaka.app/Contents/MacOS/Vagyojaka"
        
        echo "Current library dependencies:"
        otool -L "Vagyojaka.app/Contents/MacOS/Vagyojaka"
        
        # More comprehensive dependency fixing
        otool -L "Vagyojaka.app/Contents/MacOS/Vagyojaka" | tail -n +2 | while read -r line; do
            lib=$(echo "$line" | awk '{print $1}')
            
            # Skip system libraries and already fixed @rpath entries
            if [[ "$lib" =~ ^@rpath/ ]] || [[ "$lib" =~ ^/System/ ]] || [[ "$lib" =~ ^/usr/lib/ ]]; then
                continue
            fi
            
            # Handle both /usr/local and /opt/homebrew paths
            if [[ "$lib" =~ ^(/usr/local/|/opt/homebrew/) ]]; then
                basename=$(basename "$lib")
                echo "Fixing reference: $lib -> @rpath/$basename"
                install_name_tool -change "$lib" "@rpath/$basename" "Vagyojaka.app/Contents/MacOS/Vagyojaka"
            fi
        done
        
        # Add rpath to the executable if not already present
        echo "Adding @rpath..."
        install_name_tool -add_rpath "@executable_path/../Frameworks" "Vagyojaka.app/Contents/MacOS/Vagyojaka" || true
        
        # Verify changes
        echo "Verifying final library linkage..."
        otool -L "Vagyojaka.app/Contents/MacOS/Vagyojaka"
        
        # More detailed verification
        if ! otool -L "Vagyojaka.app/Contents/MacOS/Vagyojaka" | grep -q "^[[:space:]]*@rpath/"; then
            echo "Error: No @rpath libraries found in executable"
            echo "Current library paths:"
            otool -L "Vagyojaka.app/Contents/MacOS/Vagyojaka"
            exit 1
        fi

        echo "Running macdeployqt..."
        # First run to deploy Qt dependencies
        macdeployqt Vagyojaka.app -verbose=2 -always-overwrite
        
        # Create DMG
        macdeployqt Vagyojaka.app -verbose=2 -dmg -always-overwrite
        
        if [ -f Vagyojaka.dmg ]; then
          chmod 644 Vagyojaka.dmg
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            mv Vagyojaka.dmg "Vagyojaka-${{ github.ref_name }}-macos.dmg"
          fi
        else
          echo "Error: DMG file was not created!"
          exit 1
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: Vagyojaka-macOS
        path: build/output/Vagyojaka*.dmg

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: build/output/Vagyojaka*.dmg
        draft: false
        prerelease: false
        generate_release_notes: true
