name: MacOS Build

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: macos-13
    
    env:
      QT_VERSION: "6.6.1"
      MACOSX_DEPLOYMENT_TARGET: "12.0"
      HOMEBREW_NO_AUTO_UPDATE: 1  # Prevent auto-updates during build
      HOMEBREW_NO_INSTALL_CLEANUP: 1  # Prevent cleanup during build
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for versioning

    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ runner.os }}-ccache-${{ github.sha }}
        restore-keys: ${{ runner.os }}-ccache-

    - name: Install Qt
      uses: jurplel/install-qt-action@v4.1.1
      with:
        version: ${{ env.QT_VERSION }}
        modules: 'qtmultimedia qtpositioning qtwebchannel qtshadertools'
        tools: 'tools_cmake tools_ninja'
        cache: true
        aqtversion: '==3.1.*'

    - name: Prepare environment
      run: |
        brew cleanup
        brew update-reset
        # Pin versions to ensure reproducibility
        brew pin ffmpeg
        brew pin qt
        
    - name: Install dependencies
      run: |
        brew update
        PACKAGES=(
          "cmake"
          "pkg-config"
          "libgit2"
          "fftw"
          "ffmpeg"
          "webp"
          "jpeg-xl"
          "sdl2"
          "libsoxr"
        )
        
        for package in "${PACKAGES[@]}"; do
          echo "Installing $package..."
          brew install $package || {
            echo "Failed to install $package, retrying with verbose output"
            brew install -v $package
            if [ $? -ne 0 ]; then
              echo "Installation failed for $package"
              brew doctor
              exit 1
            fi
          }
        done
        
    - name: Check Libraries
      run: |
        echo "Checking library files..."
        check_lib_files() {
          local pkg=$1
          local lib_path
          
          if [ -d "/opt/homebrew" ]; then
            BREW_PREFIX="/opt/homebrew"
          else
            BREW_PREFIX="/usr/local"
          fi
          
          lib_path="$BREW_PREFIX/opt/$pkg/lib"
          
          echo "Checking $pkg"
          echo "Looking in path: $lib_path"
          lib_files=$(find $lib_path -name "*.dylib" -type f 2>/dev/null)
          if [ -z "$lib_files" ]; then
            echo "❌ No library files found for $pkg!"
            echo "Brew install location: $(brew --prefix)"
            echo "Trying to locate package..."
            brew list $pkg --verbose || echo "Failed to list package"
            return 1
          else
            echo "✅ Library files found for $pkg:"
            echo "$lib_files"
          fi
        }
        
        # Check each package
        for pkg in ffmpeg libgit2 fftw webp sdl2 libsoxr; do
          check_lib_files "$pkg" || exit 1
        done
        
    - name: Create build directory
      run: mkdir -p build
    
    - name: Configure CMake
      working-directory: ./build
      env:
        Qt6_DIR: ${{ env.Qt6_DIR }}
        CMAKE_BUILD_PARALLEL_LEVEL: $(sysctl -n hw.ncpu)
      run: |
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_PREFIX_PATH=${{ env.Qt6_DIR }} \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=12.0 \
          -DCMAKE_INSTALL_RPATH="@executable_path/../Frameworks" \
          -DCMAKE_C_COMPILER_LAUNCHER=ccache \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
          -DCMAKE_INSTALL_PREFIX=/usr/local
    
    - name: Build
      working-directory: ./build
      run: |
        cmake --build . --config Release -j$(sysctl -n hw.ncpu)
        
    - name: Package
      working-directory: ./build
      run: |
        cd output
        
        # echo "Current directory: $(pwd)"
        # echo "Directory contents:"
        # ls -la
        
        # # Setup app structure
        # if [ ! -d "Vagyojaka.app" ]; then
        #   echo "Error: Vagyojaka.app not found"
        #   exit 1
        # fi

        # echo "Running macdeployqt..."
        # # First run to deploy Qt dependencies
        # macdeployqt Vagyojaka.app -verbose=2 -always-overwrite

        # # echo "Running macdeployqtfix..."
        # # curl -O https://raw.githubusercontent.com/arl/macdeployqtfix/master/macdeployqtfix.py
        # # python3 macdeployqtfix.py \
        # #   "Vagyojaka.app/Contents/MacOS/Vagyojaka" \
        # #   "${{ env.Qt6_DIR }}" \
        # #   -v

        # # Install dylibbundler
        # brew install dylibbundler

        # echo "Running dylibbundler..."
        # # -x targets the executable
        # # -b creates the bundle directory
        # # -d specifies where to copy the libraries
        # # -p @executable_path/../Frameworks/ sets the path where libraries will be searched
        # # -of shows what operations are being performed
        # dylibbundler -x "Vagyojaka.app/Contents/MacOS/Vagyojaka" \
        #          -b \
        #          -d "Vagyojaka.app/Contents/Frameworks/" \
        #          -p @executable_path/../Frameworks/ \
        #          -of
        
        # # Create DMG
        # macdeployqt Vagyojaka.app -verbose=2 -dmg -always-overwrite

        # # Show what libraries were bundled
        # echo "Checking Frameworks contents:"
        # ls -la "Vagyojaka.app/Contents/Frameworks/"
        
        # echo "Checking library dependencies:"
        # otool -L "Vagyojaka.app/Contents/MacOS/Vagyojaka

        # Download deployqtmacx script
    echo "Downloading deployqtmacx..."
    curl -O https://raw.githubusercontent.com/e2se/deployqtmacx/main/deployqtmacx.sh
    chmod +x deployqtmacx.sh
    
    # First run with simulation to check what will happen
    echo "Running simulation..."
    ./deployqtmacx.sh Vagyojaka.app --verbose --simulate \
      -qt-path "${{ env.Qt6_DIR }}" \
      -framework-path "${{ env.Qt6_DIR }}/lib" \
      -plugins-path "${{ env.Qt6_DIR }}/plugins" \
      -environment brew \
      -system intel \
      -qt-version 6.6.1 \
      -plugins "platforms,styles,multimedia,tls,imageformats,networkinformation"
    
      # If simulation looks good, run the actual deployment
      echo "Running actual deployment..."
      ./deployqtmacx.sh Vagyojaka.app --verbose \
        -qt-path "${{ env.Qt6_DIR }}" \
        -framework-path "${{ env.Qt6_DIR }}/lib" \
        -plugins-path "${{ env.Qt6_DIR }}/plugins" \
        -environment brew \
        -system intel \
        -qt-version 6.6.1 \
        -plugins "platforms,styles,multimedia,tls,imageformats,networkinformation"
      
        echo "Checking library dependencies..."
        otool -L "Vagyojaka.app/Contents/MacOS/Vagyojaka"
        
        echo "Checking Frameworks contents:"
        ls -la "Vagyojaka.app/Contents/Frameworks/"
        
        # Create DMG using hdiutil directly
        echo "Creating DMG..."
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          DMG_NAME="Vagyojaka-${{ github.ref_name }}-macos.dmg"
        else
          DMG_NAME="Vagyojaka.dmg"
        fi
        
        hdiutil create -volname "Vagyojaka" -srcfolder "Vagyojaka.app" -ov -format UDZO "$DMG_NAME"
        
        if [ -f Vagyojaka.dmg ]; then
          chmod 644 Vagyojaka.dmg
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            mv Vagyojaka.dmg "Vagyojaka-${{ github.ref_name }}-macos.dmg"
          fi
        else
          echo "Error: DMG file was not created!"
          exit 1
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: Vagyojaka-macOS
        path: build/output/Vagyojaka*.dmg

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: build/output/Vagyojaka*.dmg
        draft: false
        prerelease: false
        generate_release_notes: true
