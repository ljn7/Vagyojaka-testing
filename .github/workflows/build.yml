name: MacOS Build

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: macos-13
    
    env:
      QT_VERSION: "6.6.1"
      MACOSX_DEPLOYMENT_TARGET: "12.0"
      SDKROOT: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.3.sdk
      HOMEBREW_NO_AUTO_UPDATE: 1
      HOMEBREW_NO_INSTALL_CLEANUP: 1
      
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ runner.os }}-ccache-${{ github.sha }}
        restore-keys: ${{ runner.os }}-ccache-

    - name: Setup build environment
      run: |
        sudo xcode-select --switch /Applications/Xcode.app
        
        echo "CFLAGS=-mmacosx-version-min=12.0" >> $GITHUB_ENV
        echo "CXXFLAGS=-mmacosx-version-min=12.0" >> $GITHUB_ENV
        echo "LDFLAGS=-mmacosx-version-min=12.0" >> $GITHUB_ENV
        echo "HOMEBREW_BUILD_FROM_SOURCE=1" >> $GITHUB_ENV
        echo "HOMEBREW_NO_BINARY=1" >> $GITHUB_ENV

    - name: Download and build dependencies
      run: |
        # Core dependencies
        CORE_PACKAGES=(
          "nasm"
          "cmake"
          "pkg-config"
          "libgit2"
          "fftw"
          "webp"
          "jpeg-xl"
          "sdl2"
          "libsoxr"
        )
        
        # FFmpeg dependencies
        FFMPEG_PACKAGES=(
          "aom"
          "dav1d"
          "vmaf"
          "opencore-amr"
          "opus"
          "rav1e"
          "srt"
          "tesseract"
          "theora"
          "x264"
          "x265"
          "libvpx"
          "snappy"
          "zimg"
          "rubberband"
          "speex"
          "rist"
          "fontconfig"
          "freetype"
          "lame"
          "frei0r"
          "libass"
          "libbluray"
          "libbs2b"
          "libvidstab"
          "openh264"
          "openjpeg"
          "libvorbis"
          "webp"
          "zeromq"
        )
        
        # Download and build core packages
        for pkg in "${CORE_PACKAGES[@]}"; do
          echo "Building $pkg..."
          HOMEBREW_DEVELOPER=1 brew install --build-from-source $pkg || {
            echo "Failed to build $pkg"
            exit 1
          }
        done
        
        # Download and build FFmpeg dependencies
        for pkg in "${FFMPEG_PACKAGES[@]}"; do
          echo "Building $pkg..."
          HOMEBREW_DEVELOPER=1 brew install --build-from-source $pkg || {
            echo "Failed to build $pkg, continuing..."
            # Don't exit on FFmpeg dependency failure
          }
        done

    - name: Build FFmpeg
      run: |
        HOMEBREW_DEVELOPER=1 brew install --build-from-source ffmpeg \
          --with-sdl2 \
          --with-freetype \
          --with-fftw \
          --with-webp \
          --with-jpeg-xl \
          --with-fontconfig \
          --with-freetype \
          --with-libass \
          --with-libvorbis \
          --with-libvpx \
          --with-openjpeg \
          --with-opus \
          --with-rav1e \
          --with-speex \
          --with-srt \
          --with-tesseract \
          --with-theora \
          --with-webp \
          --with-x264 \
          --with-x265 \
          --with-zeromq \
          --disable-avfoundation

    # Rest of the workflow remains the same...
    
    - name: Install Qt
      uses: jurplel/install-qt-action@v4.1.1
      with:
        version: ${{ env.QT_VERSION }}
        modules: 'qtmultimedia qtpositioning qtwebchannel qtshadertools'
        tools: 'tools_cmake tools_ninja'
        cache: true
        aqtversion: '==3.1.*'

    - name: Build project
      run: |
        mkdir build && cd build
        
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_PREFIX_PATH=${{ env.Qt6_DIR }} \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=12.0 \
          -DCMAKE_OSX_SYSROOT=$SDKROOT \
          -DCMAKE_INSTALL_RPATH="@executable_path/../Frameworks" \
          -DCMAKE_C_COMPILER_LAUNCHER=ccache \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
          -DCMAKE_C_FLAGS="-mmacosx-version-min=12.0" \
          -DCMAKE_CXX_FLAGS="-mmacosx-version-min=12.0" \
          -DCMAKE_SHARED_LINKER_FLAGS="-mmacosx-version-min=12.0"
        
        cmake --build . --config Release -j$(sysctl -n hw.ncpu)

    - name: Package
      working-directory: ./build/output
      run: |
        # Initial deployment
        macdeployqt Vagyojaka.app -verbose=2
        
        # Copy our built libraries
        mkdir -p Vagyojaka.app/Contents/Frameworks
        for lib in /usr/local/lib/*.dylib; do
          if [ -f "$lib" ]; then
            cp -L "$lib" Vagyojaka.app/Contents/Frameworks/
          fi
        done
        
        # Fix library paths
        find Vagyojaka.app/Contents/Frameworks -name "*.dylib" | while read lib; do
          echo "Processing $lib"
          # Fix ID
          install_name_tool -id "@rpath/$(basename $lib)" "$lib"
          
          # Fix dependencies
          otool -L "$lib" | grep "/usr/local" | cut -d' ' -f1 | while read dep; do
            if [ "$dep" != "$lib" ]; then
              install_name_tool -change "$dep" "@rpath/$(basename $dep)" "$lib"
            fi
          done
        done
        
        # Create DMG
        macdeployqt Vagyojaka.app -verbose=2 -dmg -always-overwrite

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: Vagyojaka-macOS
        path: build/output/Vagyojaka*.dmg

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: build/output/Vagyojaka*.dmg
        draft: false
        prerelease: false
        generate_release_notes: true
